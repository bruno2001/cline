@startuml shared-implementation

' 设置主题和样式
skinparam backgroundColor transparent
skinparam classAttributeIconSize 0
skinparam nodesep 100
skinparam ranksep 100

' Implementation Level Diagram for Shared Module
' Files:
' - src/shared/**/*.ts

' 包定义
package "Shared" {
    package "Config" {
        ' Implementation: src/shared/config/
        class ConfigManager {
            - config: Configuration
            - validators: Map
            + loadConfig(path: string)
            + getConfig(key: string)
            + setConfig(key: string, value: any)
            + validateConfig()
            - parseConfig(data: string)
        }

        class Configuration {
            + app: AppConfig
            + api: ApiConfig
            + services: ServiceConfig
            + integrations: IntegrationConfig
        }

        interface Validator {
            + validate(value: any)
            + getSchema()
        }
    }

    package "Events" {
        ' Implementation: src/shared/events/
        class EventEmitter {
            - listeners: Map
            + on(event: string, listener: Function)
            + off(event: string, listener: Function)
            + emit(event: string, data: any)
            + once(event: string, listener: Function)
        }

        class EventBus {
            - channels: Map
            + subscribe(channel: string, handler: Function)
            + publish(channel: string, message: any)
            + createChannel(name: string)
        }
    }

    package "Logging" {
        ' Implementation: src/shared/logging/
        class Logger {
            - name: string
            - level: LogLevel
            - transports: Transport[]
            + log(level: LogLevel, message: string)
            + error(message: string, error: Error)
            + info(message: string, data: any)
            + debug(message: string, data: any)
        }

        class Transport {
            + format: string
            + destination: string
            + write(entry: any)
            + flush()
        }

        enum LogLevel {
            ERROR
            WARN
            INFO
            DEBUG
            TRACE
        }
    }

    package "Types" {
        ' Implementation: src/shared/types/
        interface Result {
            + success: boolean
            + data: any
            + error: any
        }

        class Optional {
            - value: any
            + map(fn: Function)
            + flatMap(fn: Function)
            + getOrElse(defaultValue: any)
        }

        class Either {
            + isLeft()
            + isRight()
            + fold(leftFn: Function, rightFn: Function)
            + map(fn: Function)
        }
    }

    package "Utils" {
        ' Implementation: src/shared/utils/
        class AsyncQueue {
            - queue: any[]
            - maxSize: number
            + enqueue(item: any)
            + dequeue()
            + peek()
            + isEmpty()
        }

        class Cache {
            - store: Map
            - ttl: number
            + get(key: any)
            + set(key: any, value: any)
            + has(key: any)
            + clear()
        }
    }
}

' 关系定义
ConfigManager --> Configuration : manages
EventBus --> EventEmitter : extends
Logger --> Transport : uses
AsyncQueue --> Optional : uses
Cache --> Result : uses

' 注释
note right of ConfigManager
  管理应用配置
  处理加载和验证
  File: src/shared/config/ConfigManager.ts
end note

note right of EventBus
  中央事件管理系统
  实现发布订阅模式
  File: src/shared/events/EventBus.ts
end note

note right of Logger
  结构化日志系统
  支持多种传输方式
  File: src/shared/logging/Logger.ts
end note

@enduml 